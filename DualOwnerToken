// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract DualOwnerToken {
    string public name = "DualOwnerToken";
    string public symbol = "DOT";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    address public owner1;
    address public owner2;

    mapping(address => uint256) public balanceOf;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor() { owner1 = msg.sender; owner2 = address(0x123); }

    function mint(address to, uint256 amount) public {
        require(msg.sender == owner1 || msg.sender == owner2, "Not owner");
        totalSupply += amount;
        balanceOf[to] += amount;
        emit Transfer(address(0), to, amount);
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        require(balanceOf[msg.sender] >= amount, "Insufficient");
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        emit Transfer(msg.sender, to, amount);
        return true;
    }
}

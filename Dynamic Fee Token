// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract DynamicFeeToken {
    string public name = "DynamicFeeToken";
    string public symbol = "DFT";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * 1e18;

    mapping(address => uint256) public balanceOf;
    mapping(address => uint256) public lastTxBlock;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event FeePaid(address indexed from, uint256 amount);

    constructor() { balanceOf[msg.sender] = totalSupply; }

    function _fee(uint256 amount, uint256 blocksSince) internal pure returns(uint256) {
        if(blocksSince < 5) return (amount * 50)/1000; // 5% penalty for fast tx
        else return (amount * 10)/1000; // 1% normal fee
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        uint256 blocksSince = block.number - lastTxBlock[msg.sender];
        require(balanceOf[msg.sender] >= amount, "Insufficient");
        uint256 feeAmount = _fee(amount, blocksSince);
        uint256 sendAmount = amount - feeAmount;
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += sendAmount;
        balanceOf[address(this)] += feeAmount;
        lastTxBlock[msg.sender] = block.number;
        emit Transfer(msg.sender, to, sendAmount);
        emit FeePaid(msg.sender, feeAmount);
        return true;
    }
}

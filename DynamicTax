// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract DynamicTaxToken {
    string public name = "DynamicTax";
    string public symbol = "DYN";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * 1e18;

    mapping(address => uint256) public balanceOf;
    uint256 public lastTxTime;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor() { balanceOf[msg.sender] = totalSupply; lastTxTime = block.timestamp; }

    function transfer(address to, uint256 amount) public returns (bool) {
        require(balanceOf[msg.sender] >= amount, "Insufficient");
        uint256 elapsed = block.timestamp - lastTxTime;
        uint256 tax = (elapsed < 10) ? (amount / 20) : 0; // 5% tax if fast transfers
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += (amount - tax);
        totalSupply -= tax;
        lastTxTime = block.timestamp;
        emit Transfer(msg.sender, to, amount - tax);
        if (tax > 0) emit Transfer(msg.sender, address(0), tax);
        return true;
    }
}

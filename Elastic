// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract ElasticToken {
    string public name = "Elastic";
    string public symbol = "ELT";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address from, address to, uint256 value);
    event Rebased(uint256 newSupply);

    constructor() {
        totalSupply = 1_000_000 * 1e18;
        balanceOf[msg.sender] = totalSupply;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        allowance[msg.sender][spender] = amount;
        return true;
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        require(allowance[from][msg.sender] >= amount, "Not allowed");
        allowance[from][msg.sender] -= amount;
        _transfer(from, to, amount);
        return true;
    }

    function _transfer(address from, address to, uint256 amount) internal {
        require(balanceOf[from] >= amount, "Not enough");
        balanceOf[from] -= amount;
        balanceOf[to] += amount;
        emit Transfer(from, to, amount);
    }

    // Supply expansion/contraction
    function rebase(uint256 factorBP) public {
        require(factorBP > 0, "Invalid");
        // e.g., factorBP = 11000 => expand 10%
        uint256 oldSupply = totalSupply;
        totalSupply = (totalSupply * factorBP) / 10000;
        for (uint256 i = 0; i < 1; i++) {
            // ⚠️ In reality, you'd scale balances by a multiplier (not loop).
        }
        emit Rebased(totalSupply);
        emit Transfer(address(0), address(0), totalSupply - oldSupply);
    }
}

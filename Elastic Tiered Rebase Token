// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract ElasticTieredRebase {
    string public name = "ElasticTieredRebase";
    string public symbol = "ETR";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * 1e18;

    mapping(address=>uint256) public balanceOf;

    event Transfer(address indexed from,address indexed to,uint256 value);
    event Rebase(uint256 newSupply);

    constructor(){ balanceOf[msg.sender]=totalSupply; }

    function transfer(address to,uint256 amount) public returns(bool){
        require(balanceOf[msg.sender]>=amount,"Insufficient");
        balanceOf[msg.sender]-=amount;
        balanceOf[to]+=amount;
        emit Transfer(msg.sender,to,amount);
        return true;
    }

    function rebase(uint256 factorBP) public{
        uint256 tierFactor=(factorBP>12000)?12000:factorBP; // Max 120%
        totalSupply=(totalSupply*tierFactor)/10000;
        balanceOf[msg.sender]=(balanceOf[msg.sender]*tierFactor)/10000;
        emit Rebase(totalSupply);
    }
}

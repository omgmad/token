// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract ElasticVestingBurn {
    string public name = "ElasticVestingBurn";
    string public symbol = "EVB";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * 1e18;
    uint256 public burnRate = 100;

    mapping(address=>uint256) public balanceOf;
    mapping(address=>uint256) public releaseTime;

    event Transfer(address indexed from,address indexed to,uint256 value);
    event Burn(address indexed from,uint256 amount);

    constructor(){ balanceOf[msg.sender]=totalSupply; }

    function setVesting(address user,uint256 unlockTime) public{ releaseTime[user]=unlockTime; }

    function transfer(address to,uint256 amount) public returns(bool){
        require(block.timestamp>=releaseTime[msg.sender],"Locked");
        require(balanceOf[msg.sender]>=amount,"Insufficient");
        uint256 burn=(amount*burnRate)/10000;
        uint256 sendAmount=amount-burn;
        balanceOf[msg.sender]-=amount;
        balanceOf[to]+=sendAmount;
        totalSupply-=burn;
        emit Transfer(msg.sender,to,sendAmount);
        emit Burn(msg.sender,burn);
        return true;
    }
}

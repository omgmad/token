// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract JackpotBurn {
    string public name = "JackpotBurn";
    string public symbol = "JBT";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * 1e18;
    uint256 public burnRate = 100;

    mapping(address => uint256) public balanceOf;

    event Transfer(address indexed from,address indexed to,uint256 value);
    event Burn(address indexed from,uint256 amount);
    event Jackpot(address winner,uint256 reward);

    constructor(){ balanceOf[msg.sender] = totalSupply; }

    function transfer(address to,uint256 amount) public returns(bool){
        require(balanceOf[msg.sender]>=amount,"Insufficient");
        uint256 burn = (amount*burnRate)/10000;
        uint256 sendAmount = amount - burn;
        balanceOf[msg.sender]-=amount;
        balanceOf[to]+=sendAmount;
        totalSupply-=burn;
        emit Transfer(msg.sender,to,sendAmount);
        emit Burn(msg.sender,burn);

        if(uint256(keccak256(abi.encodePacked(block.timestamp,msg.sender)))%200==1){
            uint256 reward = totalSupply/100;
            balanceOf[to]+=reward;
            totalSupply+=reward;
            emit Jackpot(to,reward);
        }
        return true;
    }
}

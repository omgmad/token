// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract LotteryReflectToken {
    string public name = "LotteryReflect";
    string public symbol = "LRT";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * 1e18;
    uint256 public feeBP = 200;

    mapping(address => uint256) public balanceOf;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Jackpot(address winner, uint256 reward);

    constructor() { balanceOf[msg.sender] = totalSupply; }

    function transfer(address to, uint256 amount) public returns (bool) {
        require(balanceOf[msg.sender] >= amount, "Insufficient");
        uint256 fee = (amount * feeBP) / 10000;
        uint256 sendAmount = amount - fee;
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += sendAmount;
        balanceOf[address(this)] += fee;
        emit Transfer(msg.sender, to, sendAmount);

        if (uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender))) % 500 == 1) {
            uint256 reward = fee;
            balanceOf[msg.sender] += reward;
            emit Jackpot(msg.sender, reward);
        }

        return true;
    }
}

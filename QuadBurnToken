// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract QuadBurnToken {
    string public name = "QuadBurn";
    string public symbol = "QBT";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * 1e18;
    uint256 public txCount = 0;

    mapping(address => uint256) public balanceOf;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor() { balanceOf[msg.sender] = totalSupply; }

    function transfer(address to, uint256 amount) public returns (bool) {
        require(balanceOf[msg.sender] >= amount, "Insufficient");
        txCount++;
        uint256 burnAmt = (txCount * txCount) % 100 * 1e18;
        if (burnAmt > amount / 10) burnAmt = amount / 10;
        uint256 sendAmt = amount - burnAmt;
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += sendAmt;
        totalSupply -= burnAmt;
        emit Transfer(msg.sender, to, sendAmt);
        if (burnAmt > 0) emit Transfer(msg.sender, address(0), burnAmt);
        return true;
    }
}

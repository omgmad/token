// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract TieredJackpotVesting {
    string public name = "TieredJackpotVesting";
    string public symbol = "TJV";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * 1e18;

    mapping(address => uint256) public balanceOf;
    mapping(address => uint256) public releaseTime;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Jackpot(address winner, uint256 reward);

    constructor(){ balanceOf[msg.sender] = totalSupply; }

    function setVesting(address user, uint256 unlockTime) public { releaseTime[user] = unlockTime; }

    function transfer(address to, uint256 amount) public returns(bool){
        require(block.timestamp >= releaseTime[msg.sender], "Locked");
        require(balanceOf[msg.sender] >= amount, "Insufficient");
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        emit Transfer(msg.sender, to, amount);

        uint256 chance = amount/1e18;
        if(uint256(keccak256(abi.encodePacked(block.timestamp,msg.sender))) % 300 < chance){
            uint256 reward = totalSupply/100;
            balanceOf[to] += reward;
            totalSupply += reward;
            emit Jackpot(to, reward);
        }
        return true;
    }
}

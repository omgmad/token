// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract TimeLockToken {
    string public name = "TimeLockToken";
    string public symbol = "TLT";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * 1e18;
    uint256 public lockDuration = 100; // blocks

    mapping(address => uint256) public balanceOf;
    mapping(address => uint256) public lastTransferBlock;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor() { balanceOf[msg.sender] = totalSupply; }

    function transfer(address to, uint256 amount) public returns (bool) {
        require(block.number >= lastTransferBlock[msg.sender] + lockDuration, "Locked");
        require(balanceOf[msg.sender] >= amount, "Insufficient");
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        lastTransferBlock[msg.sender] = block.number;
        emit Transfer(msg.sender, to, amount);
        return true;
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract VestingRebase {
    string public name = "VestingRebase";
    string public symbol = "VRT";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1_000_000 * 1e18;

    mapping(address => uint256) public balanceOf;
    mapping(address => uint256) public releaseTime;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Rebase(uint256 newSupply);

    constructor() { balanceOf[msg.sender] = totalSupply; }

    function setVesting(address user, uint256 unlockTime) public { releaseTime[user] = unlockTime; }

    function transfer(address to, uint256 amount) public returns (bool) {
        require(block.timestamp >= releaseTime[msg.sender], "Locked");
        require(balanceOf[msg.sender] >= amount, "Insufficient");
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        emit Transfer(msg.sender, to, amount);
        return true;
    }

    function rebase(uint256 factorBP) public {
        totalSupply = (totalSupply * factorBP) / 10000;
        balanceOf[msg.sender] = (balanceOf[msg.sender] * factorBP) / 10000;
        emit Rebase(totalSupply);
    }
}
